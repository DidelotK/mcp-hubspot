# HubSpot MCP Server - Production Configuration
# Using app-component helm chart: https://gitlab.com/keltiotechnology/helm-charts/-/tree/master/app-component

fullnameOverride: hubspot-mcp-server

containers:
  - name: hubspot-mcp-server
    image:
      repository: rg.fr-par.scw.cloud/keltio-public/hubspot-mcp-server
      pullPolicy: IfNotPresent
      tag: "1.0.0"
    ports:
      - containerPort: 8080
        name: http
        protocol: TCP
    resources:
      requests:
        cpu: "200m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      httpGet:
        path: /ready
        port: http
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
      successThreshold: 1

secrets:
  - name: hubspot-mcp-secrets
    spec:
      secretStoreRef:
        name: secret-store
        kind: ClusterSecretStore
      target:
        name: hubspot-mcp-secrets
        creationPolicy: Owner
      dataFrom:
        - extract:
            key: production/hubspot-mcp-secrets

env:
  - name: MODE
    value: "sse"
  - name: HOST
    value: "0.0.0.0"
  - name: PORT
    value: "8080"
  - name: HUBSPOT_API_KEY
    valueFrom:
      secretKeyRef:
        name: hubspot-mcp-secrets
        key: hubspot-api-key
  - name: MCP_AUTH_KEY
    valueFrom:
      secretKeyRef:
        name: hubspot-mcp-secrets
        key: mcp-auth-key
  - name: MCP_AUTH_HEADER
    value: "X-API-Key"

ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    acme.cert-manager.io/http01-edit-in-place: "true"
    cert-manager.io/cluster-issuer: cert-manager
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: mcp-hubspot.keltio.fr
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: hubspot-mcp-server-prod-tls
      hosts:
        - mcp-hubspot.keltio.fr

service:
  ports:
    - port: 8080
      targetPort: 8080

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod configuration
replicaCount: 2

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  capabilities:
    drop:
      - ALL

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Service account
serviceAccount:
  create: true
  name: hubspot-mcp-server
  annotations: {}

# Network policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 443  # HTTPS to HubSpot API
        - protocol: TCP
          port: 53   # DNS
        - protocol: UDP
          port: 53   # DNS

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    labels:
      app: hubspot-mcp-server
    interval: 30s
    path: /metrics

# Common labels
commonLabels:
  app.kubernetes.io/name: hubspot-mcp-server
  app.kubernetes.io/instance: production
  app.kubernetes.io/version: "1.0.0"
  app.kubernetes.io/component: api-server
  app.kubernetes.io/part-of: mcp-platform
  app.kubernetes.io/managed-by: helm
  environment: production

# Common annotations
commonAnnotations:
  deployment.kubernetes.io/revision: "1"
  meta.helm.sh/release-name: hubspot-mcp-server
  meta.helm.sh/release-namespace: production 