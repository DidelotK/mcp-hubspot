#!/usr/bin/env python3
"""
Script d'exemple pour tester le serveur MCP HubSpot.

Ce script d√©montre comment utiliser un client MCP pour se connecter
au serveur HubSpot et r√©cup√©rer des contacts.
"""

import asyncio
import json
import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au PYTHONPATH pour importer mcp
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

try:
    from mcp import ClientSession, StdioServerParameters
    from mcp.client.stdio import stdio_client
except ImportError:
    print("‚ùå Erreur: Le package 'mcp' n'est pas install√©.")
    print("Installez-le avec: pip install mcp")
    sys.exit(1)


async def test_hubspot_mcp_server():
    """Test du serveur MCP HubSpot en r√©cup√©rant les contacts."""
    
    # V√©rifier que la cl√© API HubSpot est d√©finie
    hubspot_api_key = os.getenv("HUBSPOT_API_KEY")
    if not hubspot_api_key:
        print("‚ùå Erreur: La variable d'environnement HUBSPOT_API_KEY n'est pas d√©finie.")
        print("D√©finissez-la avec: export HUBSPOT_API_KEY='votre_cle_api'")
        return False
    
    print("üöÄ D√©marrage du test du serveur MCP HubSpot...")
    print(f"üîë Cl√© API HubSpot: {hubspot_api_key[:10]}...")
    
    # Chemin vers le serveur MCP
    server_script_path = Path(__file__).parent.parent.parent / "main.py"
    
    # Configuration du serveur
    server_params = StdioServerParameters(
        command="python",
        args=[str(server_script_path), "--mode", "stdio"],
        env={"HUBSPOT_API_KEY": hubspot_api_key}
    )
    
    try:
        # Connexion au serveur MCP
        print("üîå Connexion au serveur MCP...")
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                
                # Initialiser la session
                print("ü§ù Initialisation de la session MCP...")
                await session.initialize()
                
                # Lister les outils disponibles
                print("üìã R√©cup√©ration de la liste des outils...")
                tools = await session.list_tools()
                
                print(f"‚úÖ {len(tools.tools)} outils disponibles:")
                for tool in tools.tools:
                    print(f"  - {tool.name}: {tool.description}")
                
                # Test 1: R√©cup√©rer les 5 premiers contacts
                print("\nüß™ Test 1: R√©cup√©ration des 5 premiers contacts...")
                try:
                    result = await session.call_tool(
                        "list_hubspot_contacts",
                        arguments={"limit": 5}
                    )
                    
                    if result.content:
                        print("‚úÖ Contacts r√©cup√©r√©s avec succ√®s:")
                        for content in result.content:
                            if hasattr(content, 'text'):
                                print(content.text)
                    else:
                        print("‚ö†Ô∏è Aucun contenu retourn√©")
                        
                except Exception as e:
                    print(f"‚ùå Erreur lors de la r√©cup√©ration des contacts: {e}")
                
                # Test 2: Rechercher des contacts avec un filtre
                print("\nüß™ Test 2: Recherche de contacts avec filtre...")
                try:
                    result = await session.call_tool(
                        "list_hubspot_contacts",
                        arguments={
                            "limit": 3,
                            "filters": {"search": "test"}
                        }
                    )
                    
                    if result.content:
                        print("‚úÖ Recherche effectu√©e avec succ√®s:")
                        for content in result.content:
                            if hasattr(content, 'text'):
                                print(content.text)
                    else:
                        print("‚ö†Ô∏è Aucun r√©sultat trouv√© pour la recherche")
                        
                except Exception as e:
                    print(f"‚ùå Erreur lors de la recherche: {e}")
                
                # Test 3: Lister les entreprises
                print("\nüß™ Test 3: R√©cup√©ration des entreprises...")
                try:
                    result = await session.call_tool(
                        "list_hubspot_companies",
                        arguments={"limit": 3}
                    )
                    
                    if result.content:
                        print("‚úÖ Entreprises r√©cup√©r√©es avec succ√®s:")
                        for content in result.content:
                            if hasattr(content, 'text'):
                                print(content.text)
                    else:
                        print("‚ö†Ô∏è Aucune entreprise trouv√©e")
                        
                except Exception as e:
                    print(f"‚ùå Erreur lors de la r√©cup√©ration des entreprises: {e}")
                
                # Test 4: Lister les deals
                print("\nüß™ Test 4: R√©cup√©ration des deals...")
                try:
                    result = await session.call_tool(
                        "list_hubspot_deals",
                        arguments={"limit": 3}
                    )
                    
                    if result.content:
                        print("‚úÖ Deals r√©cup√©r√©s avec succ√®s:")
                        for content in result.content:
                            if hasattr(content, 'text'):
                                print(content.text)
                    else:
                        print("‚ö†Ô∏è Aucun deal trouv√©")
                        
                except Exception as e:
                    print(f"‚ùå Erreur lors de la r√©cup√©ration des deals: {e}")
                
                print("\nüéâ Tests termin√©s avec succ√®s!")
                return True
                
    except Exception as e:
        print(f"‚ùå Erreur de connexion au serveur MCP: {e}")
        print("V√©rifiez que:")
        print("- Le serveur MCP est accessible")
        print("- La cl√© API HubSpot est valide")
        print("- Les d√©pendances sont install√©es")
        return False


def main():
    """Point d'entr√©e principal."""
    print("=" * 60)
    print("üß™ TEST DU SERVEUR MCP HUBSPOT")
    print("=" * 60)
    
    # V√©rifier les pr√©requis
    if not os.getenv("HUBSPOT_API_KEY"):
        print("\n‚ùå Configuration manquante!")
        print("D√©finissez votre cl√© API HubSpot:")
        print("export HUBSPOT_API_KEY='votre_cle_api_hubspot'")
        sys.exit(1)
    
    # Lancer les tests
    try:
        success = asyncio.run(test_hubspot_mcp_server())
        if success:
            print("\n‚úÖ Tous les tests ont r√©ussi!")
            sys.exit(0)
        else:
            print("\n‚ùå Certains tests ont √©chou√©.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Test interrompu par l'utilisateur.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 