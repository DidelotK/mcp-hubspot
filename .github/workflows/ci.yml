name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --dev --all-extras
    
    - name: Run code quality checks
      id: lint
      run: |
        uv run python scripts/lint_check.py
      continue-on-error: true
    
    - name: Check code quality status
      run: |
        if [ ${{ steps.lint.outcome }} != 'success' ]; then
          echo "‚ùå Code quality checks failed. Please fix the issues before merging."
          exit 1
        else
          echo "‚úÖ Code quality checks passed."
        fi
    
    - name: Comment PR with code quality report
      if: always() && github.event_name == 'pull_request'
      uses: ./.github/actions/comment-pr-quality
      with:
        report-path: 'lint_report.md'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Display code quality report
      if: always() && github.event_name == 'push'
      run: |
        echo "üìã Code Quality Report:"
        if [ -f lint_report.md ]; then
          cat lint_report.md
        else
          echo "‚ùå No lint report found"
        fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --dev --all-extras
    
    - name: Debug environment
      run: |
        uv run which python
        uv run python -m pytest --version
    
    - name: Run tests
      run: |
        uv run python -m pytest --verbose --tb=short
    
    - name: Run tests with coverage
      run: |
        uv run python -m pytest --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false 