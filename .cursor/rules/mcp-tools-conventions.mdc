---
description: 
globs: 
alwaysApply: true
---
# HubSpot MCP Tools Development Conventions

description: Conventions for developing HubSpot MCP tools, including structure, naming, and testing
globs:
  - "src/hubspot_mcp/tools/*.py"
  - "src/hubspot_mcp/client/hubspot_client.py"
  - "src/hubspot_mcp/formatters/hubspot_formatter.py"
  - "tests/**"
  - "README.md"

## Mandatory Rules for Each New Tool

### 📋 Required File Structure

For each new tool `{entity}` (e.g., contacts, companies, deals):

#### 1. **Tool File**: `src/hubspot_mcp/tools/{entity}.py`
```python
"""MCP tool for managing HubSpot {entity}."""

from typing import Any, Dict, List

import mcp.types as types

from ..formatters import HubSpotFormatter
from .base import BaseTool


class {Entity}Tool(BaseTool):
    """Tool for listing HubSpot {entity}."""
    
    def get_tool_definition(self) -> types.Tool:
        # MANDATORY: Definition with complete JSON schema
        
    async def execute(self, arguments: Dict[str, Any]) -> List[types.TextContent]:
        # MANDATORY: Implementation with error handling
```

#### 2. **Client Method**: `src/hubspot_mcp/client/hubspot_client.py`
```python
async def get_{entity}(self, limit: int = 100, filters: Optional[Dict] = None) -> List[Dict]:
    """Retrieves the list of {entity} with optional filtering."""
    # MANDATORY: API URL, properties, filter handling
```

#### 3. **Formatter**: `src/hubspot_mcp/formatters/hubspot_formatter.py`
```python
@staticmethod
def format_{entity}({entity}: List[Dict[str, Any]]) -> str:
    """Formats the list of {entity} for display."""
    # MANDATORY: Formatting with emojis, title, structured properties
```

### 🧪 Mandatory Tests

#### 1. **Unit tests**: `tests/test_tools.py`
- Basic execution test
- Test with filters
- Error handling test
- Tool definition test

#### 2. **Formatting tests**: `tests/test_formatters.py`
- Test with complete data
- Test with partial data
- Test with empty list
- Test with invalid data

### 📚 Mandatory Documentation

#### 1. **README.md - "Available Tools" Section**
```markdown
### list_hubspot_{entity}

Lists HubSpot {entity} with filtering capability.

Parameters:
- limit (optional): Maximum number of {entity} to return (default: 100, max: 1000)
- filters (optional): Object containing search filters
  - search: Search term to filter {entity}

Properties returned for each {entity}:
- [MANDATORY: List all properties with descriptions in English]
```

#### 2. **README.md - "Usage Examples" Section**
```markdown
List all {entity}:
Call list_hubspot_{entity} tool without parameters

List first X {entity}:
Call list_hubspot_{entity} tool with limit: X

Search {entity} by term:
Call list_hubspot_{entity} tool with filters: {"search": "term"}
```

### 🔧 Technical Standards

#### 1. **Mandatory Naming**
- Tool name: `list_hubspot_{entity}`
- Class name: `{Entity}Tool`
- Client method: `get_{entity}`
- Formatter method: `format_{entity}`
- Test functions: `test_{entity}_*`

#### 2. **Required JSON Schema**
```python
{
    "type": "object",
    "properties": {
        "limit": {
            "type": "integer",
            "description": "Maximum number of {entity} to return (default: 100)",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
        },
        "filters": {
            "type": "object",
            "description": "Optional filters for search",
            "properties": {
                "search": {
                    "type": "string",
                    "description": "Search term to filter {entity}",
                }
            },
            "additionalProperties": False,
        },
    },
    "additionalProperties": False,
}
```

#### 3. **Standard HubSpot API Properties**
Always include:
- `createdate`: Creation date
- `lastmodifieddate`: Last modification date  
- `id`: Unique identifier

#### 4. **Display Formatting**
```python
result = f"🎯 **HubSpot {Entity.title()}** ({len(data)} found)\n\n"

for item in data:
    props = item.get("properties", {})
    result += f"**{props.get('name', 'Name not specified')}**\n"
    # [Specific properties with emojis]
    result += f"  🆔 ID: {item.get('id')}\n\n"
```

### 📝 Development Process

#### 1. **Development Order**
1. Create client method (`get_{entity}`)
2. Create formatter (`format_{entity}`)
3. Create tool class (`{Entity}Tool`)
4. Register in `__init__.py` and `handlers.py`
5. Write unit tests
6. Update README documentation

#### 2. **Tests Before Commit**
```bash
# Mandatory tests
uv run pytest tests/ --cov=src --cov-report=term-missing -v

# Required minimum coverage: 90%
# All tests must pass
```

#### 3. **Semantic Commits**
```bash
git commit -m "feat: add {entity} tool with HubSpot API integration"
git commit -m "test: add comprehensive unit tests for {entity} tool"
git commit -m "docs: update README with {entity} tool documentation"
```

### ✅ Checklist for New Tool

Before considering a tool complete:

**Code:**
- [ ] `{Entity}Tool` class inheriting from `BaseTool`
- [ ] `get_{entity}` method in `HubSpotClient`
- [ ] `format_{entity}` method in `HubSpotFormatter`
- [ ] Registration in `tools/__init__.py`
- [ ] Registration in `server/handlers.py`
- [ ] Complete JSON schema with validation

**Tests:**
- [ ] Normal execution test
- [ ] Search filter test
- [ ] API error handling test
- [ ] Formatting test with varied data
- [ ] Coverage ≥ 90%

**Documentation:**
- [ ] Tool section in README.md (in English)
- [ ] Usage examples in README.md (in English)
- [ ] Main description update (in English)
- [ ] English docstrings on all methods

**Quality:**
- [ ] Respect PEP 8 and project conventions
- [ ] Type hints on all functions
- [ ] Robust error handling
- [ ] English error messages
- [ ] User formatting with emojis

### 🚨 Strict Rules

- ❌ **NEVER** create a tool without complete tests
- ❌ **NEVER** omit README documentation
- ❌ **NEVER** use names different from conventions
- ❌ **NEVER** commit without checking test coverage
- ❌ **NEVER** use French in code, comments, or documentation
- ❌ **NEVER** create French error messages or user output
- ✅ **ALWAYS** follow development order
- ✅ **ALWAYS** use emojis in formatting
- ✅ **ALWAYS** include usage examples
- ✅ **ALWAYS** test error cases
- ✅ **ALWAYS** write everything in English

### 🌍 English-Only Policy

**All Code Elements:**
- ✅ Function names, variable names, class names in English
- ✅ Comments and docstrings in English
- ✅ Error messages in English
- ✅ User-facing output in English
- ✅ Documentation in English

**Development Communication:**
- ✅ Commit messages in English
- ✅ PR descriptions in English
- ✅ Code review comments in English
- ✅ Issue descriptions in English

**Documentation:**
- ✅ README sections in English
- ✅ API documentation in English
- ✅ Usage examples in English
- ✅ Tool descriptions in English

This ensures consistency, international collaboration, and professional standards across the entire project.

### Example Entities
The conventions apply uniformly to any CRM entity such as **contacts**, **companies**, **deals**, and now **engagements**. For engagements, the mandatory naming becomes:

- Tool file: `src/hubspot_mcp/tools/engagements.py`
- Tool class: `EngagementsTool`
- Client method: `get_engagements`
- Formatter method: `format_engagements`
- Tool name exposed to MCP: `list_hubspot_engagements` 