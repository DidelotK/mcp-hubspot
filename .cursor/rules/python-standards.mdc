---
description: 
globs: 
alwaysApply: true
---
# Python Standards

description: Python coding standards and best practices for the project
globs:
  - "src/**/*.py"
  - "tests/**/*.py"

## Mandatory Coding Rules
- **PEP 8**: Strictly follow Python style guide
- **Type hints**: Use type annotations for all functions
- **Docstrings**: Document public classes and functions in English
- **Snake_case**: Variable and function names in snake_case
- **PascalCase**: Class names in PascalCase
- **English naming**: Use English names for variables, functions, and classes

## Unit Tests
- **Mandatory** for all new features
- **Framework**: pytest exclusively
- **Structure**: Tests in `tests/` with names `test_*.py`
- **Coverage**: Minimum 80% code coverage
- **Async**: Use pytest-asyncio for asynchronous tests
- **English**: Test names and descriptions in English

## Imports and Dependencies
- **Import order**: standard library, third-party, local
- **Absolute imports** preferred over relative imports
- **Manager**: `uv` for all dependencies
- **Files**: Configuration in `pyproject.toml`

## Best Practices
- **Exceptions**: Catch specific exceptions
- **Constants**: UPPER_CASE for constants
- **Private**: Prefix with _ for private methods
- **Magic methods**: Implement __str__ and __repr__ if relevant
- **Documentation**: All comments and docstrings in English

## Logging Management
- **Framework**: Use Python's standard `logging` module exclusively
- **Format**: Structured JSON logging for production environments
- **Language**: All log messages must be in English
- **No Print**: Absolutely no `print()` statements in final code

### Log Format Standards
- **Structure**: JSON format with consistent field names
- **Required fields**: timestamp, level, message, module, function
- **Optional fields**: user_id, session_id, request_id, execution_time
- **Example format**:
```json
{
  "timestamp": "2024-01-15T10:30:00.123Z",
  "level": "INFO",
  "message": "User authentication successful",
  "module": "auth.services",
  "function": "authenticate_user",
  "user_id": "user_123",
  "execution_time_ms": 45
}
```

### Mandatory Log Levels
- **DEBUG**: Detailed diagnostic information (development only)
- **INFO**: General information about program execution
- **WARNING**: Potentially harmful situations that should be noted
- **ERROR**: Error events that allow the application to continue
- **CRITICAL**: Serious errors that may cause the application to abort

### AI Action Logging (Explainability & Traceability)
- **AI Decision Logs**: Log all AI-driven decisions with reasoning
- **Input/Output Tracking**: Log inputs and outputs for AI operations
- **Model Information**: Include model version, parameters used
- **Confidence Scores**: Log confidence levels when available
- **Execution Path**: Track the decision-making process step by step

#### AI Log Example:
```python
logger.info(
    "AI decision executed",
    extra={
        "ai_model": "gpt-4",
        "operation": "code_generation",
        "input_tokens": 150,
        "output_tokens": 75,
        "confidence": 0.92,
        "reasoning": "Generated based on user requirements and best practices",
        "execution_time_ms": 1200
    }
)
```

### Logging Configuration
```python
import logging
import json
from datetime import datetime

class JSONFormatter(logging.Formatter):
    def format(self, record):
        log_entry = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "level": record.levelname,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno
        }
        if hasattr(record, 'extra_data'):
            log_entry.update(record.extra_data)
        return json.dumps(log_entry)

# Configure logger
logging.basicConfig(
    level=logging.INFO,
    format='%(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
logger.handlers[0].setFormatter(JSONFormatter())
```

### Strict Logging Rules
- ❌ **NEVER** use `print()` statements in production code
- ❌ **NEVER** log sensitive information (passwords, API keys, personal data)
- ❌ **NEVER** use French or other languages in log messages
- ❌ **NEVER** ignore logging configuration in CI/CD
- ✅ **ALWAYS** use appropriate log levels
- ✅ **ALWAYS** include context information in logs
- ✅ **ALWAYS** log AI decisions for transparency
- ✅ **ALWAYS** structure logs as JSON in production

## Recommended Tools
- **black**: Automatic code formatting
- **isort**: Import organization
- **mypy**: Static type checking
- **pylint/flake8**: Static code analysis

## Language Policy
- ✅ **ALWAYS** use English for variable/function/class names
- ✅ **ALWAYS** write docstrings in English
- ✅ **ALWAYS** write comments in English
- ✅ **ALWAYS** use English error messages
- ❌ **NEVER** use French or other languages in code 