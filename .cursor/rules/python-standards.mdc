---
description: 
globs: 
alwaysApply: false
---
# Python Standards

description: Python coding standards and best practices for the project
globs:
  - "src/**/*.py"
  - "tests/**/*.py"

## General Conventions Reference

**📋 For general coding conventions that apply to all programming languages, see:**
📖 **[General Coding Conventions](mdc:coding-conventions.mdc)**

This file covers Python-specific standards. The general conventions file covers:
- DRY (Don't Repeat Yourself) principle
- Code organization and structure
- Error handling patterns
- Documentation requirements
- Quality assurance standards
- Language-agnostic best practices

## Python-Specific Coding Rules

### Code Style and Formatting
- **PEP 8**: Strictly follow Python style guide
- **Type hints**: Use type annotations for all functions and methods
- **Docstrings**: Document public classes and functions in English using Python docstring conventions
- **Snake_case**: Variable and function names in snake_case
- **PascalCase**: Class names in PascalCase
- **UPPER_CASE**: Constants in UPPER_CASE
- **Private members**: Prefix with single underscore `_` for protected, double underscore `__` for private
- **Magic methods**: Implement `__str__` and `__repr__` when relevant

### Type Hints and Documentation
```python
from typing import List, Dict, Optional, Union
from datetime import datetime

def process_user_data(
    user_id: int,
    data: Dict[str, Any],
    options: Optional[List[str]] = None
) -> Dict[str, Union[str, int]]:
    """Process user data with specified options.
    
    Args:
        user_id: Unique identifier for the user
        data: User data dictionary containing profile information
        options: Optional list of processing options
        
    Returns:
        Dictionary containing processed results
        
    Raises:
        ValueError: If user_id is invalid
        ProcessingError: If data processing fails
    """
    pass
```

### Import Organization
- **Standard library imports**: First group
- **Third-party imports**: Second group  
- **Local application imports**: Third group
- **Absolute imports preferred**: Over relative imports
- **One import per line**: For better readability

```python
# Standard library
import os
import sys
from datetime import datetime
from typing import Dict, List

# Third-party
import requests
from fastapi import FastAPI

# Local application
from .models import User
from .services import UserService
```

### Exception Handling
```python
# Good: Specific exception handling
try:
    result = process_data(data)
except ValueError as e:
    logger.error(f"Invalid data format: {e}")
    raise ProcessingError(f"Data validation failed: {e}")
except APIError as e:
    logger.warning(f"API call failed: {e}")
    return default_result()

# Bad: Bare except
try:
    result = process_data(data)
except:  # Never do this
    pass
```

### Lint Configuration and Rules
- **Lint ignore comments only as last resort**: Disabling linter rules (e.g., `# noqa`, `pylint: disable=...`) must be used **only when absolutely necessary**
- **Document justification**: Each occurrence must include a clear, documented justification
- **Prefer code refactoring**: Fix the underlying issue instead of ignoring warnings

```python
# Acceptable with justification
result = eval(user_input)  # noqa: S307 - Controlled environment, input validated

# Better approach - refactor instead
if user_input in ALLOWED_EXPRESSIONS:
    result = safe_eval(user_input)
```

## Python Testing Standards

### Testing Framework and Requirements
- **Framework**: pytest exclusively with pytest plugins
- **Coverage**: 100% code coverage requirement for all new code
- **TDD Approach**: Write tests BEFORE writing implementation code
- **Test isolation**: Each test should be independent and repeatable

### Python-Specific Testing Patterns

#### Test Structure and Naming
```python
# File: tests/unit/test_user_service.py
class TestUserService:
    """Test suite for UserService class."""
    
    def test_create_user_with_valid_data_returns_user_instance(self):
        # Arrange
        user_data = {"email": "test@example.com", "name": "Test User"}
        service = UserService()
        
        # Act
        result = service.create_user(user_data)
        
        # Assert
        assert isinstance(result, User)
        assert result.email == "test@example.com"
        assert result.name == "Test User"
```

#### Pytest Fixtures and Parametrization
```python
@pytest.fixture
def mock_database():
    """Mock database connection for testing."""
    with patch('app.database.get_connection') as mock_conn:
        mock_conn.return_value = MagicMock()
        yield mock_conn

@pytest.mark.parametrize("email,expected_valid", [
    ("valid@example.com", True),
    ("invalid-email", False),
    ("", False),
    (None, False),
])
def test_email_validation(email: Optional[str], expected_valid: bool):
    """Test email validation with various inputs."""
    result = validate_email(email)
    assert result == expected_valid
```

#### Async Testing
```python
@pytest.mark.asyncio
async def test_async_api_call_returns_expected_data():
    """Test asynchronous API call handling."""
    # Arrange
    mock_response = {"status": "success", "data": []}
    
    # Act
    with aioresponses() as m:
        m.get("https://api.example.com/data", payload=mock_response)
        result = await fetch_api_data()
    
    # Assert
    assert result["status"] == "success"
    assert isinstance(result["data"], list)
```

#### Database Testing with Transactions
```python
@pytest.fixture
def db_session():
    """Database session with transaction rollback."""
    from app.database import engine, SessionLocal
    
    connection = engine.connect()
    transaction = connection.begin()
    session = SessionLocal(bind=connection)
    
    yield session
    
    session.close()
    transaction.rollback()
    connection.close()
```

### Coverage Configuration
```ini
# pytest.ini
[tool:pytest]
addopts = 
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=100
    --cov-branch
    --strict-markers
    --strict-config
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests

[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
```

### Testing Tools and Dependencies
```toml
# pyproject.toml - Python testing dependencies
[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",        # Parallel test execution
    "pytest-benchmark>=4.0.0",     # Performance testing
    "factory-boy>=3.2.0",          # Test data generation
    "freezegun>=1.2.0",            # Time mocking
    "responses>=0.23.0",           # HTTP mocking
    "aioresponses>=0.7.0",         # Async HTTP mocking
]
```

## Python Logging Standards

### Logging Configuration
```python
import logging
import json
from datetime import datetime
from typing import Any, Dict

class JSONFormatter(logging.Formatter):
    """Custom JSON formatter for structured logging."""
    
    def format(self, record: logging.LogRecord) -> str:
        log_entry = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "level": record.levelname,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno,
            "process": record.process,
            "thread": record.thread,
        }
        
        # Add extra data if present
        if hasattr(record, 'extra_data'):
            log_entry.update(record.extra_data)
            
        return json.dumps(log_entry, ensure_ascii=False)

def setup_logger(name: str, level: str = "INFO") -> logging.Logger:
    """Set up structured JSON logger."""
    logger = logging.getLogger(name)
    logger.setLevel(getattr(logging, level.upper()))
    
    if not logger.handlers:
        handler = logging.StreamHandler()
        handler.setFormatter(JSONFormatter())
        logger.addHandler(handler)
    
    return logger
```

### Context Managers and Decorators
```python
import functools
from contextlib import contextmanager
from typing import Generator, Any

@contextmanager
def log_execution_time(operation: str) -> Generator[None, None, None]:
    """Context manager to log execution time."""
    start_time = time.time()
    logger.info(f"Starting operation: {operation}")
    
    try:
        yield
    except Exception as e:
        logger.error(f"Operation failed: {operation}", extra={"error": str(e)})
        raise
    finally:
        execution_time = time.time() - start_time
        logger.info(
            f"Operation completed: {operation}",
            extra={"execution_time_ms": execution_time * 1000}
        )

def log_function_calls(func):
    """Decorator to log function calls with parameters."""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        logger.debug(
            f"Calling function: {func.__name__}",
            extra={
                "function": func.__name__,
                "args": str(args),
                "kwargs": str(kwargs)
            }
        )
        try:
            result = func(*args, **kwargs)
            logger.debug(f"Function completed: {func.__name__}")
            return result
        except Exception as e:
            logger.error(
                f"Function failed: {func.__name__}",
                extra={"error": str(e), "function": func.__name__}
            )
            raise
    return wrapper
```

## Python Dependencies Management

### Package Management with uv
- **Use uv exclusively**: For dependency management and virtual environments
- **pyproject.toml**: Centralize all project configuration
- **Lock file**: Always commit `uv.lock` for reproducible builds
- **Virtual environments**: Use `uv sync` for automatic environment management

```toml
# pyproject.toml
[project]
name = "hubspot-mcp-server"
version = "0.1.0"
description = "HubSpot MCP Server for Claude Desktop"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "flake8>=6.0.0",
    "bandit>=1.7.0",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
```

## Python Performance and Best Practices

### Memory Management
```python
# Use generators for large datasets
def process_large_dataset(data: List[Dict]) -> Generator[Dict, None, None]:
    """Process large dataset efficiently using generators."""
    for item in data:
        yield process_item(item)

# Context managers for resource management
class DatabaseConnection:
    def __enter__(self):
        self.connection = create_connection()
        return self.connection
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.connection.close()

# Use dataclasses for data structures
from dataclasses import dataclass
from typing import Optional

@dataclass(frozen=True)
class User:
    """Immutable user data structure."""
    id: int
    email: str
    name: str
    created_at: datetime
    is_active: bool = True
```

### Async Programming Best Practices
```python
import asyncio
from typing import List
import aiohttp

async def fetch_multiple_urls(urls: List[str]) -> List[Dict]:
    """Fetch multiple URLs concurrently."""
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_url(session, url) for url in urls]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        return [r for r in results if not isinstance(r, Exception)]

async def fetch_url(session: aiohttp.ClientSession, url: str) -> Dict:
    """Fetch single URL with error handling."""
    try:
        async with session.get(url) as response:
            return await response.json()
    except Exception as e:
        logger.error(f"Failed to fetch {url}: {e}")
        raise
```

## Python-Specific Quality Tools

### Required Development Tools
```bash
# Install development tools
uv add --dev black isort mypy flake8 bandit pytest pytest-cov

# Format code
uv run black src tests
uv run isort src tests

# Type checking
uv run mypy src

# Linting
uv run flake8 src tests

# Security scanning
uv run bandit -r src

# Run tests with coverage
uv run pytest --cov=src --cov-report=term-missing
```

### Pre-commit Hooks
```yaml
# .pre-commit-config.yaml
repos:
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        language_version: python3.12

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort

  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
```

## Python-Specific Strict Rules

### Mandatory Requirements
- ✅ **ALWAYS** use type hints for all function parameters and return values
- ✅ **ALWAYS** write docstrings for public classes and functions
- ✅ **ALWAYS** use context managers for resource management
- ✅ **ALWAYS** prefer composition over inheritance
- ✅ **ALWAYS** use dataclasses or Pydantic models for data structures
- ✅ **ALWAYS** handle exceptions explicitly and appropriately

### Strict Prohibitions  
- ❌ **NEVER** use `print()` statements in production code (use logging)
- ❌ **NEVER** use bare `except:` clauses
- ❌ **NEVER** use mutable default arguments
- ❌ **NEVER** import with `*` (star imports)
- ❌ **NEVER** use `eval()` or `exec()` without extreme caution
- ❌ **NEVER** ignore type checker warnings without justification
- ❌ **NEVER** commit code that doesn't pass all quality checks

### Code Quality Enforcement
- **100% test coverage** required for all new code
- **All linting checks** must pass before commit
- **Type checking** must pass without errors
- **Security scans** must pass for production code
- **Performance tests** required for critical paths

This Python-specific guide supplements the general coding conventions. Always consult both documents when developing Python code for this project.

