---
description:
globs:
alwaysApply: true
---
description: Development workflow, branching, and CI/CD rules for the project
globs:
  - ".github/workflows/**"
  - "src/**"
  - "tests/**"
  - "pyproject.toml"

# Development Workflow

## Development Process
1. **Feature branch**: Create a branch from `main`
   ```bash
   git checkout -b feat/feature-description
   ```

2. **Development**: Code with unit tests
   - Write tests BEFORE code (TDD recommended)
   - Respect Python standards
   - Document public functions in English

3. **Local tests**: Execute all tests
   ```bash
   just check
   ```

4. **Semantic commit**: Use semantic versioning format
   ```bash
   git commit -m "feat: add new authentication feature"
   ```

5. **Push and PR**: Push and create a Pull Request
   ```bash
   git push origin feat/feature-description
   ```

6. **CI validation**: Wait for all CI tests to pass
   - Tests on Python 3.12 and 3.13
   - Code coverage validated
   - Linting and formatting

7. **Review and merge**: Code review then merge to main

## Strict Rules
- ❌ **NEVER** commit directly to `main`
- ❌ **NEVER** merge without passing tests
- ❌ **NEVER** push without semantic message
- ❌ **NEVER** use French in branch names, commit messages, or PR descriptions
- ✅ **ALWAYS** create a feature branch
- ✅ **ALWAYS** write tests
- ✅ **ALWAYS** respect minimum coverage (80%)
- ✅ **ALWAYS** use English for all development communication

## Main Branches
- **main**: Production branch, stable
- **develop**: Development branch (optional)
- **feat/**: New features
- **fix/**: Bug fixes
- **hotfix/**: Critical production fixes

## Language Policy
- ✅ **ALWAYS** use English for branch names
- ✅ **ALWAYS** write commit messages in English
- ✅ **ALWAYS** create PR descriptions in English
- ✅ **ALWAYS** document code changes in English
- ❌ **NEVER** use French in any development workflow element
